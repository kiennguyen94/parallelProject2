/*******************************************************************
  This file has been automatically generated by ispc
  DO NOT EDIT THIS FILE DIRECTLY
 *******************************************************************/

/* Provide Declarations */
#include <stdarg.h>
#include <setjmp.h>
#include <limits.h>
#include <stdlib.h>
#ifdef _MSC_VER
  #define NOMINMAX
  #include <windows.h>
#endif // _MSC_VER
#include <stdlib.h>
#include <stdint.h>
/* get a declaration for alloca */
#ifdef _MSC_VER
  #include <malloc.h>
  #define alloca _alloca
#else
  #include <alloca.h>
#endif

#undef ISPC_FAST_MATH
#include "sse4.h"

/* Basic Library Function Declarations */
extern "C" {
int puts(unsigned char *);
unsigned int putchar(unsigned int);
int fflush(void *);
int printf(const unsigned char *, ...);
uint8_t *memcpy(uint8_t *, uint8_t *, uint64_t );
uint8_t *memset(uint8_t *, uint8_t, uint64_t );
void memset_pattern16(void *, const void *, uint64_t );
}

#ifndef __GNUC__  /* Can only support "linkonce" vars with GCC */
#define __attribute__(X)
#endif

#if defined(__GNUC__) && defined(__APPLE_CC__)
#define __EXTERNAL_WEAK__ __attribute__((weak_import))
#elif defined(__GNUC__)
#define __EXTERNAL_WEAK__ __attribute__((weak))
#else
#define __EXTERNAL_WEAK__
#endif

#if defined(__GNUC__) && defined(__APPLE_CC__)
#define __ATTRIBUTE_WEAK__
#elif defined(__GNUC__)
#define __ATTRIBUTE_WEAK__ __attribute__((weak))
#else
#define __ATTRIBUTE_WEAK__
#endif

#if defined(__GNUC__)
#define __HIDDEN__ __attribute__((visibility("hidden")))
#endif

#if (defined(__GNUC__) || defined(__clang__)) && !defined(__INTEL_COMPILER)
#define LLVM_NAN(NanStr)   __builtin_nan(NanStr)   /* Double */
#define LLVM_NANF(NanStr)  __builtin_nanf(NanStr)  /* Float */
#define LLVM_NANS(NanStr)  __builtin_nans(NanStr)  /* Double */
#define LLVM_NANSF(NanStr) __builtin_nansf(NanStr) /* Float */
#define LLVM_INF           __builtin_inf()         /* Double */
#define LLVM_INFF          __builtin_inff()        /* Float */
//#define LLVM_PREFETCH(addr,rw,locality) __builtin_prefetch(addr,rw,locality)
//#define __ATTRIBUTE_CTOR__ __attribute__((constructor))
//#define __ATTRIBUTE_DTOR__ __attribute__((destructor))
#elif defined(_MSC_VER) || defined(__INTEL_COMPILER)
#include <limits>
#define LLVM_NAN(NanStr)   std::numeric_limits<double>::quiet_NaN()
#define LLVM_NANF(NanStr)  std::numeric_limits<float>::quiet_NaN()
#define LLVM_NANS(NanStr)  std::numeric_limits<double>::signaling_NaN()
#define LLVM_NANSF(NanStr) std::numeric_limits<float>::signaling_NaN()
#define LLVM_INF           std::numeric_limits<double>::infinity()
#define LLVM_INFF          std::numeric_limits<float>::infinity()
//#define LLVM_PREFETCH(addr,rw,locality)            /* PREFETCH */
//#define __ATTRIBUTE_CTOR__
//#define __ATTRIBUTE_DTOR__
#else
#error "Not MSVC, clang, or g++?"
#endif

#if (defined(__GNUC__) || defined(__clang__))
#define LLVM_ASM(X) __asm(X)
#endif

#if defined(__clang__) || defined(__INTEL_COMPILER) || (__GNUC__ < 4) /* Old GCCs, or compilers not GCC */ 
#define __builtin_stack_save() 0   /* not implemented */
#define __builtin_stack_restore(X) /* noop */
#endif

#define CODE_FOR_MAIN() /* Any target-specific code for main()*/

#ifndef __cplusplus
typedef unsigned char bool;
#endif


/* Support for floating point constants */
typedef uint64_t ConstantDoubleTy;
typedef uint32_t ConstantFloatTy;
typedef struct { unsigned long long f1; unsigned short f2; unsigned short pad[3]; } ConstantFP80Ty;
typedef struct { uint64_t f1, f2; } ConstantFP128Ty;


/* Global Declarations */


/* Helper union for bitcasts */
typedef union {
  unsigned int Int32;
  unsigned long long Int64;
  float Float;
  double Double;
} llvmBitCastUnion;

/* This is special class, designed for operations with long int.*/                       
namespace {                                                                                
template <int num_bits>                                                                    
struct iN {                                                                                
  int num[num_bits / (sizeof (int) * 8)];                                                  
                                                                                           
  iN () {}                                                                                 
                                                                                           
  iN (const char *val) {                                                                   
    if (val == NULL)                                                                       
      return;                                                                              
    int length = num_bits / (sizeof (int) * 8);                                            
    int val_len = 0;                                                                       
    for (val_len = 0; val[val_len]; (val_len)++);                                          
    for (int i = 0; (i < val_len && i < num_bits); i++)                                    
      num[i / (sizeof (int) * 8)] = (num[i / (sizeof (int) * 8)] << 1) | (val[i] - '0');   
  }                                                                                        
                                                                                           
  ~iN () {}                                                                                
                                                                                           
  iN operator >> (const iN rhs) {                                                          
    iN res;                                                                                
    int length = num_bits / (sizeof (int) * 8);                                            
    int cells_shift = rhs.num[0] / (sizeof(int) * 8);                                      
    int small_shift = rhs.num[0] % (sizeof(int) * 8);                                      
    for (int i = 0; i < (length - cells_shift); i++)                                       
      res.num[i] = this->num[cells_shift + i];                                             
    for (int i = 0; i < length - 1; i++) {                                                 
      res.num[i] = this->num[i] >> small_shift;                                            
      res.num[i]  = ((this->num[i + 1] << ((sizeof(int) * 8) - small_shift))) | res.num[i];
    }                                                                                      
    res.num[length - 1] = res.num[length - 1] >> small_shift;                              
    return res;                                                                            
  }                                                                                        
                                                                                           
  iN operator & (iN rhs) {                                                                 
    iN res;                                                                                
    int length = num_bits / (sizeof (int) * 8);                                            
    for (int i = 0; i < length; i++)                                                       
      res.num[i] = (this->num[i]) & (rhs.num[i]);                                          
    return res;                                                                            
  }                                                                                        
                                                                                           
  operator uint32_t() { return this->num[0]; }                                             
                                                                                           
  template <class T>                                                                       
  friend iN<num_bits> __cast_bits(iN<num_bits> to, T from) {                               
    for (int i = 0; i <4; i++)                                         
      to.num[i] = ((int*)(&from))[i];                                                      
    return to;                                                                             
  }                                                                                        
                                                                                           
  template <class T>                                                                       
  friend T __cast_bits(T to, iN<num_bits> from) {                                          
    for (int i = 0; i <4; i++)                                         
      ((int*)(&to))[i] = from.num[i];                                                      
    return to;                                                                             
  }                                                                                        
                                                                                           
  template <int ALIGN, class T>                                                            
  friend void __store(T *p, iN<num_bits> val) {                                            
    for (int i = 0; i <4; i++)                                         
      ((int*)p)[i] = val.num[i];                                                           
  }                                                                                        
};                                                                                         
};


/* Function Declarations */
extern "C" {
void mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E_(float x0_, float y0_, float x1_, float y1_, uint32_t width_, uint32_t height_, uint32_t maxIterations_, uint32_t *output_, __vec4_i1 __mask_);
void mandelbrot_ispc(float x0_, float y0_, float x1_, float y1_, uint32_t width_, uint32_t height_, uint32_t maxIterations_, uint32_t *output_);
}



/* Function Bodies */
template <typename A, typename B> static inline int llvm_fcmp_ord(A X, B Y) { return X == X && Y == Y; }
template <typename A, typename B> static inline int llvm_fcmp_uno(A X, B Y) { return X != X || Y != Y; }
template <typename A, typename B> static inline int llvm_fcmp_ueq(A X, B Y) { return X == Y || llvm_fcmp_uno(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_une(A X, B Y) { return X != Y; }
template <typename A, typename B> static inline int llvm_fcmp_ult(A X, B Y) { return X <  Y || llvm_fcmp_uno(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_ugt(A X, B Y) { return X >  Y || llvm_fcmp_uno(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_ule(A X, B Y) { return X <= Y || llvm_fcmp_uno(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_uge(A X, B Y) { return X >= Y || llvm_fcmp_uno(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_oeq(A X, B Y) { return X == Y ; }
template <typename A, typename B> static inline int llvm_fcmp_one(A X, B Y) { return X != Y && llvm_fcmp_ord(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_olt(A X, B Y) { return X <  Y ; }
template <typename A, typename B> static inline int llvm_fcmp_ogt(A X, B Y) { return X >  Y ; }
template <typename A, typename B> static inline int llvm_fcmp_ole(A X, B Y) { return X <= Y ; }
template <typename A, typename B> static inline int llvm_fcmp_oge(A X, B Y) { return X >= Y ; }
template <typename A> A *Memset(A *ptr, int count, size_t len) { return (A *)memset(ptr, count, len); }

static const int32_t __attribute__ ((aligned(16))) VectorConstant0[] = { 0u, 1u, 2u, 3u,  };
static const int32_t __attribute__ ((aligned(16))) VectorConstant1[] = { 0u, 1u, 2u, 3u,  };

void mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E_(float x0_, float y0_, float x1_, float y1_, uint32_t width_, uint32_t height_, uint32_t maxIterations_, uint32_t *output_, __vec4_i1 __mask_) {
  __vec4_f div_sub_x1_load_x0_load_width_load_to_float_smear_;
  __vec4_f div_sub_y1_load_y0_load_height_load_to_float_broadcast_init_;
  uint32_t aligned_end_;
  __vec4_i32 width_smear_;
  __vec4_f x0_smear_;
  __vec4_f y0_load68_broadcast_init_;
  __vec4_i32 maxIterations_smear_;
  __vec4_i1 less_i_load_count_load_2e_i132177_;
  uint8_t *output_load76_ptr2int_2void_;
  uint32_t j_2e_0188_;
  uint32_t j_2e_0188___PHI;
  __vec4_f j_load37_to_float_broadcast_init_;
  __vec4_f tmp__1_;
  __vec4_f __extract_element_smear_;
  uint32_t mul_j_load38_width_load39_;
  bool internal_mask_26_function_mask10_any_2e_i169_;
  uint32_t new_counter_2e_us_;
  __vec4_i1 oldMask_26_test_2e_i173_2e_us_;
  __vec4_i1 oldMask_26_test_2e_i173_2e_us___PHI;
  __vec4_f z_im_2e_0_2e_i172_2e_us_;
  __vec4_f z_im_2e_0_2e_i172_2e_us___PHI;
  __vec4_f z_re_2e_0_2e_i171_2e_us_;
  __vec4_f z_re_2e_0_2e_i171_2e_us___PHI;
  __vec4_i32 i_2e_i_2e_0170_2e_us_;
  __vec4_i32 i_2e_i_2e_0170_2e_us___PHI;
  __vec4_f mul_z_re_load_z_re_load13_2e_i_2e_us_;
  __vec4_f mul_z_im_load_z_im_load14_2e_i_2e_us_;
  __vec4_i1 oldMask_26_test16_2e_i_2e_us_and_mask_;
  uint64_t finished_26_func_movmsk_2e_i_2e_us_;
  uint64_t internal_mask_26_function_mask12_movmsk_2e_i_2e_us_;
  __vec4_i1 new_mask28_2e_i_2e_us_;
  __vec4_f add_c_re_load42_new_re_load_2e_i_2e_us_;
  __vec4_f add_c_im_load44_new_im_load_2e_i_2e_us_;
  __vec4_f z_re_2e_1_2e_i_2e_us_;
  __vec4_f z_re_2e_1_2e_i_2e_us___PHI;
  __vec4_f z_im_2e_1_2e_i_2e_us_;
  __vec4_f z_im_2e_1_2e_i_2e_us___PHI;
  __vec4_i1 internal_mask_memory_2e_1_2e_i_2e_us_;
  __vec4_i1 internal_mask_memory_2e_1_2e_i_2e_us___PHI;
  __vec4_i32 v1_2e_i_2e_us_;
  __vec4_i1 oldMask_26_test_2e_i_2e_us_and_mask_;
  bool internal_mask_26_function_mask10_any_2e_i_2e_us_;
  uint32_t counter_2e_1175_2e_us_;
  uint32_t counter_2e_1175_2e_us___PHI;
  __vec4_i32 counter_2e_1175_2e_us_smear_;
  __vec4_f add_x0_load34_broadcast_mul_i_load35_to_float_dx_load_2e_us_;
  uint32_t mul__index_load_2e_elt0_2e_us_;
  uint32_t counter_2e_1175_;
  uint32_t counter_2e_1175___PHI;
  uint32_t new_counter_;
  __vec4_f z_re_2e_1_2e_i136_;
  __vec4_f z_re_2e_1_2e_i136___PHI;
  __vec4_f z_im_2e_1_2e_i137_;
  __vec4_f z_im_2e_1_2e_i137___PHI;
  __vec4_i1 internal_mask_memory_2e_1_2e_i138_;
  __vec4_i1 internal_mask_memory_2e_1_2e_i138___PHI;
  __vec4_i32 v1_2e_i160_;
  __vec4_i1 oldMask_26_test_2e_i133_and_mask_;
  __vec4_i1 internal_mask_26_function_mask10_2e_i_and_mask_;
  bool internal_mask_26_function_mask10_any_2e_i134_;
  __vec4_i1 internal_mask_26_function_mask10_2e_i185_;
  __vec4_i1 internal_mask_26_function_mask10_2e_i185___PHI;
  __vec4_i1 oldMask_26_test_2e_i133184_;
  __vec4_i1 oldMask_26_test_2e_i133184___PHI;
  __vec4_f z_im_2e_0_2e_i129183_;
  __vec4_f z_im_2e_0_2e_i129183___PHI;
  __vec4_f z_re_2e_0_2e_i128182_;
  __vec4_f z_re_2e_0_2e_i128182___PHI;
  __vec4_i32 i_2e_i127_2e_0181_;
  __vec4_i32 i_2e_i127_2e_0181___PHI;
  __vec4_f mul_z_re_load_z_re_load13_2e_i142_;
  __vec4_f mul_z_im_load_z_im_load14_2e_i143_;
  __vec4_i1 oldMask_26_test16_2e_i146_and_mask_;
  __vec4_i1 finished_26_func_2e_i_and_mask_;
  uint64_t finished_26_func_movmsk_2e_i147_;
  uint64_t internal_mask_26_function_mask12_movmsk_2e_i148_;
  __vec4_i1 new_mask28_2e_i151_;
  __vec4_f add_c_re_load42_new_re_load_2e_i155_;
  __vec4_f add_c_im_load44_new_im_load_2e_i156_;
  __vec4_i32 i_2e_i127_2e_0_2e_lcssa_;
  __vec4_i32 i_2e_i127_2e_0_2e_lcssa___PHI;
  uint32_t j_load98_plus1_;
  uint32_t counter_2e_1_2e_lcssa_;
  uint32_t counter_2e_1_2e_lcssa___PHI;
  __vec4_i32 counter_2e_1_2e_lcssa_smear_;
  __vec4_i32 iter_val55_;
  __vec4_i1 cmp58_;
  __vec4_f add_x0_load64_broadcast_mul_i_load65_to_float_dx_load66_;
  __vec4_f j_load69_to_float_broadcast_init_;
  __vec4_f tmp__2_;
  __vec4_f __extract_element189_smear_;
  uint32_t mul__index_load75_2e_elt0_;
  __vec4_i1 internal_mask_26_function_mask10_2e_i179_and_mask_;
  bool internal_mask_26_function_mask10_any_2e_i134180_;

  div_sub_x1_load_x0_load_width_load_to_float_smear_ = __smear_float<__vec4_f>((((float )((((float )(x1_ - x0_))) / (((float )(int32_t )width_))))));
  div_sub_y1_load_y0_load_height_load_to_float_broadcast_init_ = __vec4_f ( /* UNDEF */);
  __insert_element(&div_sub_y1_load_y0_load_height_load_to_float_broadcast_init_, 0u, (((float )((((float )(y1_ - y0_))) / (((float )(int32_t )height_))))));
  if ((((int32_t )height_) > ((int32_t )0u))) {
    goto for_loop_2e_lr_2e_ph_label;
  } else {
    goto for_exit_label;
  }

for_loop_2e_lr_2e_ph_label: {
  aligned_end_ = ((uint32_t )(((uint32_t )width_) - ((uint32_t )(((int32_t )(((int32_t )width_) % ((int32_t )4u)))))));
  width_smear_ = __smear_i32<__vec4_i32>(width_);
  x0_smear_ = __smear_float<__vec4_f>(x0_);
  y0_load68_broadcast_init_ = __vec4_f ( /* UNDEF */);
  __insert_element(&y0_load68_broadcast_init_, 0u, y0_);
  maxIterations_smear_ = __smear_i32<__vec4_i32>(maxIterations_);
  less_i_load_count_load_2e_i132177_ = __signed_greater_than_i32(maxIterations_smear_, __setzero_i32<__vec4_i32>());
  output_load76_ptr2int_2void_ = ((uint8_t *)output_);
  j_2e_0188___PHI = 0u;   /* for PHI node */
  goto for_loop_label;

}
  do {     /* Syntactic loop 'for_loop' to make GCC happy */
for_loop_label: {
  j_2e_0188_ = j_2e_0188___PHI;
  if ((((int32_t )aligned_end_) > ((int32_t )0u))) {
    goto foreach_full_body_2e_lr_2e_ph_label;
  } else {
    counter_2e_1_2e_lcssa___PHI = 0u;   /* for PHI node */
    goto partial_inner_all_outer_label;
  }

}
foreach_full_body_2e_lr_2e_ph_label: {
  j_load37_to_float_broadcast_init_ = __vec4_f ( /* UNDEF */);
  __insert_element(&j_load37_to_float_broadcast_init_, 0u, (((float )(int32_t )j_2e_0188_)));
  tmp__1_ = __add(y0_load68_broadcast_init_, (__mul(div_sub_y1_load_y0_load_height_load_to_float_broadcast_init_, j_load37_to_float_broadcast_init_)));
  __extract_element_smear_ = __smear_float<__vec4_f>(((__extract_element(tmp__1_, 0u))));
  mul_j_load38_width_load39_ = ((uint32_t )(((uint32_t )j_2e_0188_) * ((uint32_t )width_)));
  internal_mask_26_function_mask10_any_2e_i169_ = (( /*tail*/ __any(less_i_load_count_load_2e_i132177_))&1);
  if (internal_mask_26_function_mask10_any_2e_i169_) {
    counter_2e_1175_2e_us___PHI = 0u;   /* for PHI node */
    goto for_loop_2e_i_2e_lr_2e_ph_2e_us_label;
  } else {
    counter_2e_1175___PHI = 0u;   /* for PHI node */
    goto mandel___vyfvyfvyi_2e_exit_label;
  }

}
  do {     /* Syntactic loop 'mandel___vyfvyfvyi.exit' to make GCC happy */
mandel___vyfvyfvyi_2e_exit_label: {
  counter_2e_1175_ = counter_2e_1175___PHI;
  __store<4>((((__vec4_i32 (*))((&output_load76_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )((((uint32_t )(((uint32_t )counter_2e_1175_) + ((uint32_t )mul_j_load38_width_load39_)))) << 2u))))])))), __setzero_i32<__vec4_i32>());
  new_counter_ = ((uint32_t )(((uint32_t )counter_2e_1175_) + ((uint32_t )4u)));
  if ((((int32_t )new_counter_) < ((int32_t )aligned_end_))) {
    counter_2e_1175___PHI = new_counter_;   /* for PHI node */
    goto mandel___vyfvyfvyi_2e_exit_label;
  } else {
    counter_2e_1_2e_lcssa___PHI = new_counter_;   /* for PHI node */
    goto partial_inner_all_outer_label;
  }

}
  } while (1); /* end of syntactic loop 'mandel___vyfvyfvyi.exit' */
  do {     /* Syntactic loop 'for_loop.i.lr.ph.us' to make GCC happy */
for_loop_2e_i_2e_lr_2e_ph_2e_us_label: {
  counter_2e_1175_2e_us_ = counter_2e_1175_2e_us___PHI;
  counter_2e_1175_2e_us_smear_ = __smear_i32<__vec4_i32>(counter_2e_1175_2e_us_);
  add_x0_load34_broadcast_mul_i_load35_to_float_dx_load_2e_us_ = __add(x0_smear_, (__mul(div_sub_x1_load_x0_load_width_load_to_float_smear_, ((__cast_sitofp(__vec4_f (), (__add(counter_2e_1175_2e_us_smear_, __load<16>((const __vec4_i32  *)(VectorConstant1))))))))));
  mul__index_load_2e_elt0_2e_us_ = (((uint32_t )(((uint32_t )counter_2e_1175_2e_us_) + ((uint32_t )mul_j_load38_width_load39_)))) << 2u;
  oldMask_26_test_2e_i173_2e_us___PHI = less_i_load_count_load_2e_i132177_;   /* for PHI node */
  z_im_2e_0_2e_i172_2e_us___PHI = __extract_element_smear_;   /* for PHI node */
  z_re_2e_0_2e_i171_2e_us___PHI = add_x0_load34_broadcast_mul_i_load35_to_float_dx_load_2e_us_;   /* for PHI node */
  i_2e_i_2e_0170_2e_us___PHI = __setzero_i32<__vec4_i32>();   /* for PHI node */
  goto for_loop_2e_i_2e_us_label;

}
  do {     /* Syntactic loop 'for_loop.i.us' to make GCC happy */
for_loop_2e_i_2e_us_label: {
  oldMask_26_test_2e_i173_2e_us_ = oldMask_26_test_2e_i173_2e_us___PHI;
  z_im_2e_0_2e_i172_2e_us_ = z_im_2e_0_2e_i172_2e_us___PHI;
  z_re_2e_0_2e_i171_2e_us_ = z_re_2e_0_2e_i171_2e_us___PHI;
  i_2e_i_2e_0170_2e_us_ = i_2e_i_2e_0170_2e_us___PHI;
  mul_z_re_load_z_re_load13_2e_i_2e_us_ = __mul(z_re_2e_0_2e_i171_2e_us_, z_re_2e_0_2e_i171_2e_us_);
  mul_z_im_load_z_im_load14_2e_i_2e_us_ = __mul(z_im_2e_0_2e_i172_2e_us_, z_im_2e_0_2e_i172_2e_us_);
  oldMask_26_test16_2e_i_2e_us_and_mask_ = __greater_than_float_and_mask((__add(mul_z_re_load_z_re_load13_2e_i_2e_us_, mul_z_im_load_z_im_load14_2e_i_2e_us_)), __smear_float<__vec4_f>(0x1p+2), oldMask_26_test_2e_i173_2e_us_);
  finished_26_func_movmsk_2e_i_2e_us_ =  /*tail*/ __movmsk(oldMask_26_test16_2e_i_2e_us_and_mask_);
  internal_mask_26_function_mask12_movmsk_2e_i_2e_us_ =  /*tail*/ __movmsk(oldMask_26_test_2e_i173_2e_us_);
  if ((finished_26_func_movmsk_2e_i_2e_us_ == internal_mask_26_function_mask12_movmsk_2e_i_2e_us_)) {
    z_re_2e_1_2e_i_2e_us___PHI = z_re_2e_0_2e_i171_2e_us_;   /* for PHI node */
    z_im_2e_1_2e_i_2e_us___PHI = z_im_2e_0_2e_i172_2e_us_;   /* for PHI node */
    internal_mask_memory_2e_1_2e_i_2e_us___PHI = __setzero_i1<__vec4_i1>();   /* for PHI node */
    goto for_step_2e_i_2e_us_label;
  } else {
    goto not_all_continued_or_breaked_2e_i_2e_us_label;
  }

}
not_all_continued_or_breaked_2e_i_2e_us_label: {
  new_mask28_2e_i_2e_us_ = __xor(oldMask_26_test_2e_i173_2e_us_, oldMask_26_test16_2e_i_2e_us_and_mask_);
  add_c_re_load42_new_re_load_2e_i_2e_us_ = __add(add_x0_load34_broadcast_mul_i_load35_to_float_dx_load_2e_us_, (__sub(mul_z_re_load_z_re_load13_2e_i_2e_us_, mul_z_im_load_z_im_load14_2e_i_2e_us_)));
  add_c_im_load44_new_im_load_2e_i_2e_us_ = __add(__extract_element_smear_, (__mul((__mul(z_re_2e_0_2e_i171_2e_us_, __smear_float<__vec4_f>(0x1p+1))), z_im_2e_0_2e_i172_2e_us_)));
  z_re_2e_1_2e_i_2e_us___PHI = add_c_re_load42_new_re_load_2e_i_2e_us_;   /* for PHI node */
  z_im_2e_1_2e_i_2e_us___PHI = add_c_im_load44_new_im_load_2e_i_2e_us_;   /* for PHI node */
  internal_mask_memory_2e_1_2e_i_2e_us___PHI = new_mask28_2e_i_2e_us_;   /* for PHI node */
  goto for_step_2e_i_2e_us_label;

}
for_step_2e_i_2e_us_label: {
  z_re_2e_1_2e_i_2e_us_ = z_re_2e_1_2e_i_2e_us___PHI;
  z_im_2e_1_2e_i_2e_us_ = z_im_2e_1_2e_i_2e_us___PHI;
  internal_mask_memory_2e_1_2e_i_2e_us_ = internal_mask_memory_2e_1_2e_i_2e_us___PHI;
  v1_2e_i_2e_us_ = __select(internal_mask_memory_2e_1_2e_i_2e_us_, (__add(i_2e_i_2e_0170_2e_us_, __smear_i32<__vec4_i32>(1u))), i_2e_i_2e_0170_2e_us_);
  oldMask_26_test_2e_i_2e_us_and_mask_ = __signed_less_than_i32_and_mask(v1_2e_i_2e_us_, maxIterations_smear_, internal_mask_memory_2e_1_2e_i_2e_us_);
  internal_mask_26_function_mask10_any_2e_i_2e_us_ = (( /*tail*/ __any(oldMask_26_test_2e_i_2e_us_and_mask_))&1);
  if (internal_mask_26_function_mask10_any_2e_i_2e_us_) {
    oldMask_26_test_2e_i173_2e_us___PHI = oldMask_26_test_2e_i_2e_us_and_mask_;   /* for PHI node */
    z_im_2e_0_2e_i172_2e_us___PHI = z_im_2e_1_2e_i_2e_us_;   /* for PHI node */
    z_re_2e_0_2e_i171_2e_us___PHI = z_re_2e_1_2e_i_2e_us_;   /* for PHI node */
    i_2e_i_2e_0170_2e_us___PHI = v1_2e_i_2e_us_;   /* for PHI node */
    goto for_loop_2e_i_2e_us_label;
  } else {
    goto mandel___vyfvyfvyi_2e_exit_2e_us_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop.i.us' */
mandel___vyfvyfvyi_2e_exit_2e_us_label: {
  __store<4>((((__vec4_i32 (*))((&output_load76_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )mul__index_load_2e_elt0_2e_us_)))])))), v1_2e_i_2e_us_);
  new_counter_2e_us_ = ((uint32_t )(((uint32_t )counter_2e_1175_2e_us_) + ((uint32_t )4u)));
  if ((((int32_t )new_counter_2e_us_) < ((int32_t )aligned_end_))) {
    counter_2e_1175_2e_us___PHI = new_counter_2e_us_;   /* for PHI node */
    goto for_loop_2e_i_2e_lr_2e_ph_2e_us_label;
  } else {
    counter_2e_1_2e_lcssa___PHI = new_counter_2e_us_;   /* for PHI node */
    goto partial_inner_all_outer_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop.i.lr.ph.us' */
partial_inner_all_outer_label: {
  counter_2e_1_2e_lcssa_ = counter_2e_1_2e_lcssa___PHI;
  if ((((int32_t )counter_2e_1_2e_lcssa_) < ((int32_t )width_))) {
    goto partial_inner_only_label;
  } else {
    goto foreach_reset_label;
  }

}
partial_inner_only_label: {
  counter_2e_1_2e_lcssa_smear_ = __smear_i32<__vec4_i32>(counter_2e_1_2e_lcssa_);
  iter_val55_ = __add(counter_2e_1_2e_lcssa_smear_, __load<16>((const __vec4_i32  *)(VectorConstant1)));
  cmp58_ = __signed_less_than_i32(iter_val55_, width_smear_);
  add_x0_load64_broadcast_mul_i_load65_to_float_dx_load66_ = __add(x0_smear_, (__mul(div_sub_x1_load_x0_load_width_load_to_float_smear_, ((__cast_sitofp(__vec4_f (), iter_val55_))))));
  j_load69_to_float_broadcast_init_ = __vec4_f ( /* UNDEF */);
  __insert_element(&j_load69_to_float_broadcast_init_, 0u, (((float )(int32_t )j_2e_0188_)));
  tmp__2_ = __add(y0_load68_broadcast_init_, (__mul(div_sub_y1_load_y0_load_height_load_to_float_broadcast_init_, j_load69_to_float_broadcast_init_)));
  __extract_element189_smear_ = __smear_float<__vec4_f>(((__extract_element(tmp__2_, 0u))));
  mul__index_load75_2e_elt0_ = (((uint32_t )(((uint32_t )counter_2e_1_2e_lcssa_) + ((uint32_t )(((uint32_t )(((uint32_t )j_2e_0188_) * ((uint32_t )width_)))))))) << 2u;
  internal_mask_26_function_mask10_2e_i179_and_mask_ = __signed_greater_than_i32_and_mask(maxIterations_smear_, __setzero_i32<__vec4_i32>(), cmp58_);
  internal_mask_26_function_mask10_any_2e_i134180_ = (( /*tail*/ __any(internal_mask_26_function_mask10_2e_i179_and_mask_))&1);
  if (internal_mask_26_function_mask10_any_2e_i134180_) {
    internal_mask_26_function_mask10_2e_i185___PHI = internal_mask_26_function_mask10_2e_i179_and_mask_;   /* for PHI node */
    oldMask_26_test_2e_i133184___PHI = less_i_load_count_load_2e_i132177_;   /* for PHI node */
    z_im_2e_0_2e_i129183___PHI = __extract_element189_smear_;   /* for PHI node */
    z_re_2e_0_2e_i128182___PHI = add_x0_load64_broadcast_mul_i_load65_to_float_dx_load66_;   /* for PHI node */
    i_2e_i127_2e_0181___PHI = __setzero_i32<__vec4_i32>();   /* for PHI node */
    goto for_loop_2e_i150_label;
  } else {
    i_2e_i127_2e_0_2e_lcssa___PHI = __setzero_i32<__vec4_i32>();   /* for PHI node */
    goto mandel___vyfvyfvyi_2e_exit158_label;
  }

}
  do {     /* Syntactic loop 'for_loop.i150' to make GCC happy */
for_loop_2e_i150_label: {
  internal_mask_26_function_mask10_2e_i185_ = internal_mask_26_function_mask10_2e_i185___PHI;
  oldMask_26_test_2e_i133184_ = oldMask_26_test_2e_i133184___PHI;
  z_im_2e_0_2e_i129183_ = z_im_2e_0_2e_i129183___PHI;
  z_re_2e_0_2e_i128182_ = z_re_2e_0_2e_i128182___PHI;
  i_2e_i127_2e_0181_ = i_2e_i127_2e_0181___PHI;
  mul_z_re_load_z_re_load13_2e_i142_ = __mul(z_re_2e_0_2e_i128182_, z_re_2e_0_2e_i128182_);
  mul_z_im_load_z_im_load14_2e_i143_ = __mul(z_im_2e_0_2e_i129183_, z_im_2e_0_2e_i129183_);
  oldMask_26_test16_2e_i146_and_mask_ = __greater_than_float_and_mask((__add(mul_z_re_load_z_re_load13_2e_i142_, mul_z_im_load_z_im_load14_2e_i143_)), __smear_float<__vec4_f>(0x1p+2), oldMask_26_test_2e_i133184_);
  finished_26_func_2e_i_and_mask_ = __signed_less_than_i32_and_mask(iter_val55_, width_smear_, oldMask_26_test16_2e_i146_and_mask_);
  finished_26_func_movmsk_2e_i147_ =  /*tail*/ __movmsk(finished_26_func_2e_i_and_mask_);
  internal_mask_26_function_mask12_movmsk_2e_i148_ =  /*tail*/ __movmsk(internal_mask_26_function_mask10_2e_i185_);
  if ((finished_26_func_movmsk_2e_i147_ == internal_mask_26_function_mask12_movmsk_2e_i148_)) {
    z_re_2e_1_2e_i136___PHI = z_re_2e_0_2e_i128182_;   /* for PHI node */
    z_im_2e_1_2e_i137___PHI = z_im_2e_0_2e_i129183_;   /* for PHI node */
    internal_mask_memory_2e_1_2e_i138___PHI = __setzero_i1<__vec4_i1>();   /* for PHI node */
    goto for_step_2e_i141_label;
  } else {
    goto not_all_continued_or_breaked_2e_i157_label;
  }

}
not_all_continued_or_breaked_2e_i157_label: {
  new_mask28_2e_i151_ = __xor(oldMask_26_test_2e_i133184_, oldMask_26_test16_2e_i146_and_mask_);
  add_c_re_load42_new_re_load_2e_i155_ = __add(add_x0_load64_broadcast_mul_i_load65_to_float_dx_load66_, (__sub(mul_z_re_load_z_re_load13_2e_i142_, mul_z_im_load_z_im_load14_2e_i143_)));
  add_c_im_load44_new_im_load_2e_i156_ = __add(__extract_element189_smear_, (__mul((__mul(z_re_2e_0_2e_i128182_, __smear_float<__vec4_f>(0x1p+1))), z_im_2e_0_2e_i129183_)));
  z_re_2e_1_2e_i136___PHI = add_c_re_load42_new_re_load_2e_i155_;   /* for PHI node */
  z_im_2e_1_2e_i137___PHI = add_c_im_load44_new_im_load_2e_i156_;   /* for PHI node */
  internal_mask_memory_2e_1_2e_i138___PHI = new_mask28_2e_i151_;   /* for PHI node */
  goto for_step_2e_i141_label;

}
for_step_2e_i141_label: {
  z_re_2e_1_2e_i136_ = z_re_2e_1_2e_i136___PHI;
  z_im_2e_1_2e_i137_ = z_im_2e_1_2e_i137___PHI;
  internal_mask_memory_2e_1_2e_i138_ = internal_mask_memory_2e_1_2e_i138___PHI;
  v1_2e_i160_ = __select(internal_mask_memory_2e_1_2e_i138_, (__add(i_2e_i127_2e_0181_, __smear_i32<__vec4_i32>(1u))), i_2e_i127_2e_0181_);
  oldMask_26_test_2e_i133_and_mask_ = __signed_less_than_i32_and_mask(v1_2e_i160_, maxIterations_smear_, internal_mask_memory_2e_1_2e_i138_);
  internal_mask_26_function_mask10_2e_i_and_mask_ = __signed_less_than_i32_and_mask(iter_val55_, width_smear_, oldMask_26_test_2e_i133_and_mask_);
  internal_mask_26_function_mask10_any_2e_i134_ = (( /*tail*/ __any(internal_mask_26_function_mask10_2e_i_and_mask_))&1);
  if (internal_mask_26_function_mask10_any_2e_i134_) {
    internal_mask_26_function_mask10_2e_i185___PHI = internal_mask_26_function_mask10_2e_i_and_mask_;   /* for PHI node */
    oldMask_26_test_2e_i133184___PHI = oldMask_26_test_2e_i133_and_mask_;   /* for PHI node */
    z_im_2e_0_2e_i129183___PHI = z_im_2e_1_2e_i137_;   /* for PHI node */
    z_re_2e_0_2e_i128182___PHI = z_re_2e_1_2e_i136_;   /* for PHI node */
    i_2e_i127_2e_0181___PHI = v1_2e_i160_;   /* for PHI node */
    goto for_loop_2e_i150_label;
  } else {
    i_2e_i127_2e_0_2e_lcssa___PHI = v1_2e_i160_;   /* for PHI node */
    goto mandel___vyfvyfvyi_2e_exit158_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop.i150' */
mandel___vyfvyfvyi_2e_exit158_label: {
  i_2e_i127_2e_0_2e_lcssa_ = i_2e_i127_2e_0_2e_lcssa___PHI;
  __masked_store_i32((((__vec4_i32 (*))((&output_load76_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )mul__index_load75_2e_elt0_)))])))), i_2e_i127_2e_0_2e_lcssa_, cmp58_);
  goto foreach_reset_label;

}
foreach_reset_label: {
  j_load98_plus1_ = ((uint32_t )(((uint32_t )j_2e_0188_) + ((uint32_t )1u)));
  if ((j_load98_plus1_ == height_)) {
    goto for_exit_label;
  } else {
    j_2e_0188___PHI = j_load98_plus1_;   /* for PHI node */
    goto for_loop_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop' */
for_exit_label: {
  return;
}
}


static const int32_t __attribute__ ((aligned(16))) VectorConstant2[] = { 0u, 1u, 2u, 3u,  };
static const int32_t __attribute__ ((aligned(16))) VectorConstant3[] = { 0u, 1u, 2u, 3u,  };

void mandelbrot_ispc(float x0_, float y0_, float x1_, float y1_, uint32_t width_, uint32_t height_, uint32_t maxIterations_, uint32_t *output_) {
  __vec4_f div_sub_x1_load_x0_load_width_load_to_float_smear_;
  __vec4_f div_sub_y1_load_y0_load_height_load_to_float_broadcast_init_;
  uint32_t aligned_end_;
  __vec4_i32 width_smear_;
  __vec4_f x0_smear_;
  __vec4_f y0_load68_broadcast_init_;
  __vec4_i32 maxIterations_smear_;
  __vec4_i1 less_i_load_count_load_2e_i132177_;
  uint8_t *output_load76_ptr2int_2void_;
  uint32_t j_2e_0188_;
  uint32_t j_2e_0188___PHI;
  __vec4_f j_load37_to_float_broadcast_init_;
  __vec4_f tmp__3_;
  __vec4_f __extract_element_smear_;
  uint32_t mul_j_load38_width_load39_;
  bool internal_mask_26_function_mask10_any_2e_i169_;
  uint32_t new_counter_2e_us_;
  __vec4_i1 oldMask_26_test_2e_i173_2e_us_;
  __vec4_i1 oldMask_26_test_2e_i173_2e_us___PHI;
  __vec4_f z_im_2e_0_2e_i172_2e_us_;
  __vec4_f z_im_2e_0_2e_i172_2e_us___PHI;
  __vec4_f z_re_2e_0_2e_i171_2e_us_;
  __vec4_f z_re_2e_0_2e_i171_2e_us___PHI;
  __vec4_i32 i_2e_i_2e_0170_2e_us_;
  __vec4_i32 i_2e_i_2e_0170_2e_us___PHI;
  __vec4_f mul_z_re_load_z_re_load13_2e_i_2e_us_;
  __vec4_f mul_z_im_load_z_im_load14_2e_i_2e_us_;
  __vec4_i1 oldMask_26_test16_2e_i_2e_us_and_mask_;
  uint64_t finished_26_func_movmsk_2e_i_2e_us_;
  uint64_t internal_mask_26_function_mask12_movmsk_2e_i_2e_us_;
  __vec4_i1 new_mask28_2e_i_2e_us_;
  __vec4_f add_c_re_load42_new_re_load_2e_i_2e_us_;
  __vec4_f add_c_im_load44_new_im_load_2e_i_2e_us_;
  __vec4_f z_re_2e_1_2e_i_2e_us_;
  __vec4_f z_re_2e_1_2e_i_2e_us___PHI;
  __vec4_f z_im_2e_1_2e_i_2e_us_;
  __vec4_f z_im_2e_1_2e_i_2e_us___PHI;
  __vec4_i1 internal_mask_memory_2e_1_2e_i_2e_us_;
  __vec4_i1 internal_mask_memory_2e_1_2e_i_2e_us___PHI;
  __vec4_i32 v1_2e_i_2e_us_;
  __vec4_i1 oldMask_26_test_2e_i_2e_us_and_mask_;
  bool internal_mask_26_function_mask10_any_2e_i_2e_us_;
  uint32_t counter_2e_1175_2e_us_;
  uint32_t counter_2e_1175_2e_us___PHI;
  __vec4_i32 counter_2e_1175_2e_us_smear_;
  __vec4_f add_x0_load34_broadcast_mul_i_load35_to_float_dx_load_2e_us_;
  uint32_t mul__index_load_2e_elt0_2e_us_;
  uint32_t counter_2e_1175_;
  uint32_t counter_2e_1175___PHI;
  uint32_t new_counter_;
  __vec4_f z_re_2e_1_2e_i136_;
  __vec4_f z_re_2e_1_2e_i136___PHI;
  __vec4_f z_im_2e_1_2e_i137_;
  __vec4_f z_im_2e_1_2e_i137___PHI;
  __vec4_i1 internal_mask_memory_2e_1_2e_i138_;
  __vec4_i1 internal_mask_memory_2e_1_2e_i138___PHI;
  __vec4_i32 v1_2e_i160_;
  __vec4_i1 oldMask_26_test_2e_i133_and_mask_;
  __vec4_i1 internal_mask_26_function_mask10_2e_i_and_mask_;
  bool internal_mask_26_function_mask10_any_2e_i134_;
  __vec4_i1 internal_mask_26_function_mask10_2e_i185_;
  __vec4_i1 internal_mask_26_function_mask10_2e_i185___PHI;
  __vec4_i1 oldMask_26_test_2e_i133184_;
  __vec4_i1 oldMask_26_test_2e_i133184___PHI;
  __vec4_f z_im_2e_0_2e_i129183_;
  __vec4_f z_im_2e_0_2e_i129183___PHI;
  __vec4_f z_re_2e_0_2e_i128182_;
  __vec4_f z_re_2e_0_2e_i128182___PHI;
  __vec4_i32 i_2e_i127_2e_0181_;
  __vec4_i32 i_2e_i127_2e_0181___PHI;
  __vec4_f mul_z_re_load_z_re_load13_2e_i142_;
  __vec4_f mul_z_im_load_z_im_load14_2e_i143_;
  __vec4_i1 oldMask_26_test16_2e_i146_and_mask_;
  __vec4_i1 finished_26_func_2e_i_and_mask_;
  uint64_t finished_26_func_movmsk_2e_i147_;
  uint64_t internal_mask_26_function_mask12_movmsk_2e_i148_;
  __vec4_i1 new_mask28_2e_i151_;
  __vec4_f add_c_re_load42_new_re_load_2e_i155_;
  __vec4_f add_c_im_load44_new_im_load_2e_i156_;
  __vec4_i32 i_2e_i127_2e_0_2e_lcssa_;
  __vec4_i32 i_2e_i127_2e_0_2e_lcssa___PHI;
  uint32_t j_load98_plus1_;
  uint32_t counter_2e_1_2e_lcssa_;
  uint32_t counter_2e_1_2e_lcssa___PHI;
  __vec4_i32 counter_2e_1_2e_lcssa_smear_;
  __vec4_i32 iter_val55_;
  __vec4_i1 cmp58_;
  __vec4_f add_x0_load64_broadcast_mul_i_load65_to_float_dx_load66_;
  __vec4_f j_load69_to_float_broadcast_init_;
  __vec4_f tmp__4_;
  __vec4_f __extract_element189_smear_;
  uint32_t mul__index_load75_2e_elt0_;
  __vec4_i1 internal_mask_26_function_mask10_2e_i179_and_mask_;
  bool internal_mask_26_function_mask10_any_2e_i134180_;

  div_sub_x1_load_x0_load_width_load_to_float_smear_ = __smear_float<__vec4_f>((((float )((((float )(x1_ - x0_))) / (((float )(int32_t )width_))))));
  div_sub_y1_load_y0_load_height_load_to_float_broadcast_init_ = __vec4_f ( /* UNDEF */);
  __insert_element(&div_sub_y1_load_y0_load_height_load_to_float_broadcast_init_, 0u, (((float )((((float )(y1_ - y0_))) / (((float )(int32_t )height_))))));
  if ((((int32_t )height_) > ((int32_t )0u))) {
    goto for_loop_2e_lr_2e_ph_label;
  } else {
    goto for_exit_label;
  }

for_loop_2e_lr_2e_ph_label: {
  aligned_end_ = ((uint32_t )(((uint32_t )width_) - ((uint32_t )(((int32_t )(((int32_t )width_) % ((int32_t )4u)))))));
  width_smear_ = __smear_i32<__vec4_i32>(width_);
  x0_smear_ = __smear_float<__vec4_f>(x0_);
  y0_load68_broadcast_init_ = __vec4_f ( /* UNDEF */);
  __insert_element(&y0_load68_broadcast_init_, 0u, y0_);
  maxIterations_smear_ = __smear_i32<__vec4_i32>(maxIterations_);
  less_i_load_count_load_2e_i132177_ = __signed_greater_than_i32(maxIterations_smear_, __setzero_i32<__vec4_i32>());
  output_load76_ptr2int_2void_ = ((uint8_t *)output_);
  j_2e_0188___PHI = 0u;   /* for PHI node */
  goto for_loop_label;

}
  do {     /* Syntactic loop 'for_loop' to make GCC happy */
for_loop_label: {
  j_2e_0188_ = j_2e_0188___PHI;
  if ((((int32_t )aligned_end_) > ((int32_t )0u))) {
    goto foreach_full_body_2e_lr_2e_ph_label;
  } else {
    counter_2e_1_2e_lcssa___PHI = 0u;   /* for PHI node */
    goto partial_inner_all_outer_label;
  }

}
foreach_full_body_2e_lr_2e_ph_label: {
  j_load37_to_float_broadcast_init_ = __vec4_f ( /* UNDEF */);
  __insert_element(&j_load37_to_float_broadcast_init_, 0u, (((float )(int32_t )j_2e_0188_)));
  tmp__3_ = __add(y0_load68_broadcast_init_, (__mul(div_sub_y1_load_y0_load_height_load_to_float_broadcast_init_, j_load37_to_float_broadcast_init_)));
  __extract_element_smear_ = __smear_float<__vec4_f>(((__extract_element(tmp__3_, 0u))));
  mul_j_load38_width_load39_ = ((uint32_t )(((uint32_t )j_2e_0188_) * ((uint32_t )width_)));
  internal_mask_26_function_mask10_any_2e_i169_ = (( /*tail*/ __any(less_i_load_count_load_2e_i132177_))&1);
  if (internal_mask_26_function_mask10_any_2e_i169_) {
    counter_2e_1175_2e_us___PHI = 0u;   /* for PHI node */
    goto for_loop_2e_i_2e_lr_2e_ph_2e_us_label;
  } else {
    counter_2e_1175___PHI = 0u;   /* for PHI node */
    goto mandel___vyfvyfvyi_2e_exit_label;
  }

}
  do {     /* Syntactic loop 'mandel___vyfvyfvyi.exit' to make GCC happy */
mandel___vyfvyfvyi_2e_exit_label: {
  counter_2e_1175_ = counter_2e_1175___PHI;
  __store<4>((((__vec4_i32 (*))((&output_load76_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )((((uint32_t )(((uint32_t )counter_2e_1175_) + ((uint32_t )mul_j_load38_width_load39_)))) << 2u))))])))), __setzero_i32<__vec4_i32>());
  new_counter_ = ((uint32_t )(((uint32_t )counter_2e_1175_) + ((uint32_t )4u)));
  if ((((int32_t )new_counter_) < ((int32_t )aligned_end_))) {
    counter_2e_1175___PHI = new_counter_;   /* for PHI node */
    goto mandel___vyfvyfvyi_2e_exit_label;
  } else {
    counter_2e_1_2e_lcssa___PHI = new_counter_;   /* for PHI node */
    goto partial_inner_all_outer_label;
  }

}
  } while (1); /* end of syntactic loop 'mandel___vyfvyfvyi.exit' */
  do {     /* Syntactic loop 'for_loop.i.lr.ph.us' to make GCC happy */
for_loop_2e_i_2e_lr_2e_ph_2e_us_label: {
  counter_2e_1175_2e_us_ = counter_2e_1175_2e_us___PHI;
  counter_2e_1175_2e_us_smear_ = __smear_i32<__vec4_i32>(counter_2e_1175_2e_us_);
  add_x0_load34_broadcast_mul_i_load35_to_float_dx_load_2e_us_ = __add(x0_smear_, (__mul(div_sub_x1_load_x0_load_width_load_to_float_smear_, ((__cast_sitofp(__vec4_f (), (__add(counter_2e_1175_2e_us_smear_, __load<16>((const __vec4_i32  *)(VectorConstant3))))))))));
  mul__index_load_2e_elt0_2e_us_ = (((uint32_t )(((uint32_t )counter_2e_1175_2e_us_) + ((uint32_t )mul_j_load38_width_load39_)))) << 2u;
  oldMask_26_test_2e_i173_2e_us___PHI = less_i_load_count_load_2e_i132177_;   /* for PHI node */
  z_im_2e_0_2e_i172_2e_us___PHI = __extract_element_smear_;   /* for PHI node */
  z_re_2e_0_2e_i171_2e_us___PHI = add_x0_load34_broadcast_mul_i_load35_to_float_dx_load_2e_us_;   /* for PHI node */
  i_2e_i_2e_0170_2e_us___PHI = __setzero_i32<__vec4_i32>();   /* for PHI node */
  goto for_loop_2e_i_2e_us_label;

}
  do {     /* Syntactic loop 'for_loop.i.us' to make GCC happy */
for_loop_2e_i_2e_us_label: {
  oldMask_26_test_2e_i173_2e_us_ = oldMask_26_test_2e_i173_2e_us___PHI;
  z_im_2e_0_2e_i172_2e_us_ = z_im_2e_0_2e_i172_2e_us___PHI;
  z_re_2e_0_2e_i171_2e_us_ = z_re_2e_0_2e_i171_2e_us___PHI;
  i_2e_i_2e_0170_2e_us_ = i_2e_i_2e_0170_2e_us___PHI;
  mul_z_re_load_z_re_load13_2e_i_2e_us_ = __mul(z_re_2e_0_2e_i171_2e_us_, z_re_2e_0_2e_i171_2e_us_);
  mul_z_im_load_z_im_load14_2e_i_2e_us_ = __mul(z_im_2e_0_2e_i172_2e_us_, z_im_2e_0_2e_i172_2e_us_);
  oldMask_26_test16_2e_i_2e_us_and_mask_ = __greater_than_float_and_mask((__add(mul_z_re_load_z_re_load13_2e_i_2e_us_, mul_z_im_load_z_im_load14_2e_i_2e_us_)), __smear_float<__vec4_f>(0x1p+2), oldMask_26_test_2e_i173_2e_us_);
  finished_26_func_movmsk_2e_i_2e_us_ =  /*tail*/ __movmsk(oldMask_26_test16_2e_i_2e_us_and_mask_);
  internal_mask_26_function_mask12_movmsk_2e_i_2e_us_ =  /*tail*/ __movmsk(oldMask_26_test_2e_i173_2e_us_);
  if ((finished_26_func_movmsk_2e_i_2e_us_ == internal_mask_26_function_mask12_movmsk_2e_i_2e_us_)) {
    z_re_2e_1_2e_i_2e_us___PHI = z_re_2e_0_2e_i171_2e_us_;   /* for PHI node */
    z_im_2e_1_2e_i_2e_us___PHI = z_im_2e_0_2e_i172_2e_us_;   /* for PHI node */
    internal_mask_memory_2e_1_2e_i_2e_us___PHI = __setzero_i1<__vec4_i1>();   /* for PHI node */
    goto for_step_2e_i_2e_us_label;
  } else {
    goto not_all_continued_or_breaked_2e_i_2e_us_label;
  }

}
not_all_continued_or_breaked_2e_i_2e_us_label: {
  new_mask28_2e_i_2e_us_ = __xor(oldMask_26_test_2e_i173_2e_us_, oldMask_26_test16_2e_i_2e_us_and_mask_);
  add_c_re_load42_new_re_load_2e_i_2e_us_ = __add(add_x0_load34_broadcast_mul_i_load35_to_float_dx_load_2e_us_, (__sub(mul_z_re_load_z_re_load13_2e_i_2e_us_, mul_z_im_load_z_im_load14_2e_i_2e_us_)));
  add_c_im_load44_new_im_load_2e_i_2e_us_ = __add(__extract_element_smear_, (__mul((__mul(z_re_2e_0_2e_i171_2e_us_, __smear_float<__vec4_f>(0x1p+1))), z_im_2e_0_2e_i172_2e_us_)));
  z_re_2e_1_2e_i_2e_us___PHI = add_c_re_load42_new_re_load_2e_i_2e_us_;   /* for PHI node */
  z_im_2e_1_2e_i_2e_us___PHI = add_c_im_load44_new_im_load_2e_i_2e_us_;   /* for PHI node */
  internal_mask_memory_2e_1_2e_i_2e_us___PHI = new_mask28_2e_i_2e_us_;   /* for PHI node */
  goto for_step_2e_i_2e_us_label;

}
for_step_2e_i_2e_us_label: {
  z_re_2e_1_2e_i_2e_us_ = z_re_2e_1_2e_i_2e_us___PHI;
  z_im_2e_1_2e_i_2e_us_ = z_im_2e_1_2e_i_2e_us___PHI;
  internal_mask_memory_2e_1_2e_i_2e_us_ = internal_mask_memory_2e_1_2e_i_2e_us___PHI;
  v1_2e_i_2e_us_ = __select(internal_mask_memory_2e_1_2e_i_2e_us_, (__add(i_2e_i_2e_0170_2e_us_, __smear_i32<__vec4_i32>(1u))), i_2e_i_2e_0170_2e_us_);
  oldMask_26_test_2e_i_2e_us_and_mask_ = __signed_less_than_i32_and_mask(v1_2e_i_2e_us_, maxIterations_smear_, internal_mask_memory_2e_1_2e_i_2e_us_);
  internal_mask_26_function_mask10_any_2e_i_2e_us_ = (( /*tail*/ __any(oldMask_26_test_2e_i_2e_us_and_mask_))&1);
  if (internal_mask_26_function_mask10_any_2e_i_2e_us_) {
    oldMask_26_test_2e_i173_2e_us___PHI = oldMask_26_test_2e_i_2e_us_and_mask_;   /* for PHI node */
    z_im_2e_0_2e_i172_2e_us___PHI = z_im_2e_1_2e_i_2e_us_;   /* for PHI node */
    z_re_2e_0_2e_i171_2e_us___PHI = z_re_2e_1_2e_i_2e_us_;   /* for PHI node */
    i_2e_i_2e_0170_2e_us___PHI = v1_2e_i_2e_us_;   /* for PHI node */
    goto for_loop_2e_i_2e_us_label;
  } else {
    goto mandel___vyfvyfvyi_2e_exit_2e_us_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop.i.us' */
mandel___vyfvyfvyi_2e_exit_2e_us_label: {
  __store<4>((((__vec4_i32 (*))((&output_load76_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )mul__index_load_2e_elt0_2e_us_)))])))), v1_2e_i_2e_us_);
  new_counter_2e_us_ = ((uint32_t )(((uint32_t )counter_2e_1175_2e_us_) + ((uint32_t )4u)));
  if ((((int32_t )new_counter_2e_us_) < ((int32_t )aligned_end_))) {
    counter_2e_1175_2e_us___PHI = new_counter_2e_us_;   /* for PHI node */
    goto for_loop_2e_i_2e_lr_2e_ph_2e_us_label;
  } else {
    counter_2e_1_2e_lcssa___PHI = new_counter_2e_us_;   /* for PHI node */
    goto partial_inner_all_outer_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop.i.lr.ph.us' */
partial_inner_all_outer_label: {
  counter_2e_1_2e_lcssa_ = counter_2e_1_2e_lcssa___PHI;
  if ((((int32_t )counter_2e_1_2e_lcssa_) < ((int32_t )width_))) {
    goto partial_inner_only_label;
  } else {
    goto foreach_reset_label;
  }

}
partial_inner_only_label: {
  counter_2e_1_2e_lcssa_smear_ = __smear_i32<__vec4_i32>(counter_2e_1_2e_lcssa_);
  iter_val55_ = __add(counter_2e_1_2e_lcssa_smear_, __load<16>((const __vec4_i32  *)(VectorConstant3)));
  cmp58_ = __signed_less_than_i32(iter_val55_, width_smear_);
  add_x0_load64_broadcast_mul_i_load65_to_float_dx_load66_ = __add(x0_smear_, (__mul(div_sub_x1_load_x0_load_width_load_to_float_smear_, ((__cast_sitofp(__vec4_f (), iter_val55_))))));
  j_load69_to_float_broadcast_init_ = __vec4_f ( /* UNDEF */);
  __insert_element(&j_load69_to_float_broadcast_init_, 0u, (((float )(int32_t )j_2e_0188_)));
  tmp__4_ = __add(y0_load68_broadcast_init_, (__mul(div_sub_y1_load_y0_load_height_load_to_float_broadcast_init_, j_load69_to_float_broadcast_init_)));
  __extract_element189_smear_ = __smear_float<__vec4_f>(((__extract_element(tmp__4_, 0u))));
  mul__index_load75_2e_elt0_ = (((uint32_t )(((uint32_t )counter_2e_1_2e_lcssa_) + ((uint32_t )(((uint32_t )(((uint32_t )j_2e_0188_) * ((uint32_t )width_)))))))) << 2u;
  internal_mask_26_function_mask10_2e_i179_and_mask_ = __signed_greater_than_i32_and_mask(maxIterations_smear_, __setzero_i32<__vec4_i32>(), cmp58_);
  internal_mask_26_function_mask10_any_2e_i134180_ = (( /*tail*/ __any(internal_mask_26_function_mask10_2e_i179_and_mask_))&1);
  if (internal_mask_26_function_mask10_any_2e_i134180_) {
    internal_mask_26_function_mask10_2e_i185___PHI = internal_mask_26_function_mask10_2e_i179_and_mask_;   /* for PHI node */
    oldMask_26_test_2e_i133184___PHI = less_i_load_count_load_2e_i132177_;   /* for PHI node */
    z_im_2e_0_2e_i129183___PHI = __extract_element189_smear_;   /* for PHI node */
    z_re_2e_0_2e_i128182___PHI = add_x0_load64_broadcast_mul_i_load65_to_float_dx_load66_;   /* for PHI node */
    i_2e_i127_2e_0181___PHI = __setzero_i32<__vec4_i32>();   /* for PHI node */
    goto for_loop_2e_i150_label;
  } else {
    i_2e_i127_2e_0_2e_lcssa___PHI = __setzero_i32<__vec4_i32>();   /* for PHI node */
    goto mandel___vyfvyfvyi_2e_exit158_label;
  }

}
  do {     /* Syntactic loop 'for_loop.i150' to make GCC happy */
for_loop_2e_i150_label: {
  internal_mask_26_function_mask10_2e_i185_ = internal_mask_26_function_mask10_2e_i185___PHI;
  oldMask_26_test_2e_i133184_ = oldMask_26_test_2e_i133184___PHI;
  z_im_2e_0_2e_i129183_ = z_im_2e_0_2e_i129183___PHI;
  z_re_2e_0_2e_i128182_ = z_re_2e_0_2e_i128182___PHI;
  i_2e_i127_2e_0181_ = i_2e_i127_2e_0181___PHI;
  mul_z_re_load_z_re_load13_2e_i142_ = __mul(z_re_2e_0_2e_i128182_, z_re_2e_0_2e_i128182_);
  mul_z_im_load_z_im_load14_2e_i143_ = __mul(z_im_2e_0_2e_i129183_, z_im_2e_0_2e_i129183_);
  oldMask_26_test16_2e_i146_and_mask_ = __greater_than_float_and_mask((__add(mul_z_re_load_z_re_load13_2e_i142_, mul_z_im_load_z_im_load14_2e_i143_)), __smear_float<__vec4_f>(0x1p+2), oldMask_26_test_2e_i133184_);
  finished_26_func_2e_i_and_mask_ = __signed_less_than_i32_and_mask(iter_val55_, width_smear_, oldMask_26_test16_2e_i146_and_mask_);
  finished_26_func_movmsk_2e_i147_ =  /*tail*/ __movmsk(finished_26_func_2e_i_and_mask_);
  internal_mask_26_function_mask12_movmsk_2e_i148_ =  /*tail*/ __movmsk(internal_mask_26_function_mask10_2e_i185_);
  if ((finished_26_func_movmsk_2e_i147_ == internal_mask_26_function_mask12_movmsk_2e_i148_)) {
    z_re_2e_1_2e_i136___PHI = z_re_2e_0_2e_i128182_;   /* for PHI node */
    z_im_2e_1_2e_i137___PHI = z_im_2e_0_2e_i129183_;   /* for PHI node */
    internal_mask_memory_2e_1_2e_i138___PHI = __setzero_i1<__vec4_i1>();   /* for PHI node */
    goto for_step_2e_i141_label;
  } else {
    goto not_all_continued_or_breaked_2e_i157_label;
  }

}
not_all_continued_or_breaked_2e_i157_label: {
  new_mask28_2e_i151_ = __xor(oldMask_26_test_2e_i133184_, oldMask_26_test16_2e_i146_and_mask_);
  add_c_re_load42_new_re_load_2e_i155_ = __add(add_x0_load64_broadcast_mul_i_load65_to_float_dx_load66_, (__sub(mul_z_re_load_z_re_load13_2e_i142_, mul_z_im_load_z_im_load14_2e_i143_)));
  add_c_im_load44_new_im_load_2e_i156_ = __add(__extract_element189_smear_, (__mul((__mul(z_re_2e_0_2e_i128182_, __smear_float<__vec4_f>(0x1p+1))), z_im_2e_0_2e_i129183_)));
  z_re_2e_1_2e_i136___PHI = add_c_re_load42_new_re_load_2e_i155_;   /* for PHI node */
  z_im_2e_1_2e_i137___PHI = add_c_im_load44_new_im_load_2e_i156_;   /* for PHI node */
  internal_mask_memory_2e_1_2e_i138___PHI = new_mask28_2e_i151_;   /* for PHI node */
  goto for_step_2e_i141_label;

}
for_step_2e_i141_label: {
  z_re_2e_1_2e_i136_ = z_re_2e_1_2e_i136___PHI;
  z_im_2e_1_2e_i137_ = z_im_2e_1_2e_i137___PHI;
  internal_mask_memory_2e_1_2e_i138_ = internal_mask_memory_2e_1_2e_i138___PHI;
  v1_2e_i160_ = __select(internal_mask_memory_2e_1_2e_i138_, (__add(i_2e_i127_2e_0181_, __smear_i32<__vec4_i32>(1u))), i_2e_i127_2e_0181_);
  oldMask_26_test_2e_i133_and_mask_ = __signed_less_than_i32_and_mask(v1_2e_i160_, maxIterations_smear_, internal_mask_memory_2e_1_2e_i138_);
  internal_mask_26_function_mask10_2e_i_and_mask_ = __signed_less_than_i32_and_mask(iter_val55_, width_smear_, oldMask_26_test_2e_i133_and_mask_);
  internal_mask_26_function_mask10_any_2e_i134_ = (( /*tail*/ __any(internal_mask_26_function_mask10_2e_i_and_mask_))&1);
  if (internal_mask_26_function_mask10_any_2e_i134_) {
    internal_mask_26_function_mask10_2e_i185___PHI = internal_mask_26_function_mask10_2e_i_and_mask_;   /* for PHI node */
    oldMask_26_test_2e_i133184___PHI = oldMask_26_test_2e_i133_and_mask_;   /* for PHI node */
    z_im_2e_0_2e_i129183___PHI = z_im_2e_1_2e_i137_;   /* for PHI node */
    z_re_2e_0_2e_i128182___PHI = z_re_2e_1_2e_i136_;   /* for PHI node */
    i_2e_i127_2e_0181___PHI = v1_2e_i160_;   /* for PHI node */
    goto for_loop_2e_i150_label;
  } else {
    i_2e_i127_2e_0_2e_lcssa___PHI = v1_2e_i160_;   /* for PHI node */
    goto mandel___vyfvyfvyi_2e_exit158_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop.i150' */
mandel___vyfvyfvyi_2e_exit158_label: {
  i_2e_i127_2e_0_2e_lcssa_ = i_2e_i127_2e_0_2e_lcssa___PHI;
  __masked_store_i32((((__vec4_i32 (*))((&output_load76_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )mul__index_load75_2e_elt0_)))])))), i_2e_i127_2e_0_2e_lcssa_, cmp58_);
  goto foreach_reset_label;

}
foreach_reset_label: {
  j_load98_plus1_ = ((uint32_t )(((uint32_t )j_2e_0188_) + ((uint32_t )1u)));
  if ((j_load98_plus1_ == height_)) {
    goto for_exit_label;
  } else {
    j_2e_0188___PHI = j_load98_plus1_;   /* for PHI node */
    goto for_loop_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop' */
for_exit_label: {
  return;
}
}

